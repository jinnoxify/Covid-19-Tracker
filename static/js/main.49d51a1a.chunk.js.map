{"version":3,"sources":["Components/InfoBox.js","util.js","Components/Map.js","Components/Table1.js","Components/LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","center","zoom","casesType","countries","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table1","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.49d51a1a.chunk.js","sourcesContent":["import React from 'react'\r\nimport './InfoBox.css'\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\n\r\nfunction InfoBox({title, cases, total, active, isRed, ...props}) {\r\n    return (\r\n            <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\r\n            <CardContent>\r\n                <Typography className='infoBox__title' color='textSecondary'>\r\n                    {title}\r\n                </Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n                    {cases}\r\n                </h2>\r\n                <Typography className='infoBox__total'>\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        rgb: \"rgb(204, 16, 52)\",\r\n        half_op: \"rgba(204, 16, 52, 0.5)\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        rgb: \"rgb(125, 215, 29)\",\r\n        half_op: \"rgba(125, 215, 29, 0.5)\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        rgb: \"rgb(251, 68, 67)\",\r\n        half_op: \"rgba(251, 68, 67, 0.5)\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    let sortedData = [...data];\r\n    sortedData.sort((a, b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    });\r\n    return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n    data.map((country) => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            fillOpacity={0.4}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                    ></div>\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">\r\n                        Cases: {numeral(country.cases).format(\"0,0\")}\r\n                    </div>\r\n                    <div className=\"info-recovered\">\r\n                        Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                    </div>\r\n                    <div className=\"info-deaths\">\r\n                        Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n                    </div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ));","import React from 'react'\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"../util\";\r\n\r\nfunction Map({ center, zoom, casesType, countries}) {\r\n    return (\r\n        <div className='map'>\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from 'numeral'\r\n\r\nfunction Table1({countries}) {\r\n    return (\r\n        <div className='table'>\r\n            {countries.map(country => (\r\n                <tr>\r\n                    <td>{country.country}</td>\r\n                    <td>\r\n                        <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table1\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from 'numeral'\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n            type: \"time\",\r\n            time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                // Include a dollar sign in the ticks\r\n                callback: function (value, index, values) {\r\n                    return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({casesType}) {\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                let chartData = buildChartData(data, casesType);\r\n                setData(chartData);\r\n            })\r\n        }\r\n        fetchData();\r\n    }, [casesType])\r\n    return (\r\n        <div>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            }\r\n                        ]\r\n                    }}\r\n                    options={options}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { FormControl, Select, MenuItem, Card, CardContent  } from '@material-ui/core'\nimport InfoBox from './Components/InfoBox'\nimport Map from './Components/Map'\nimport Table1 from './Components/Table1'\nimport { sortData, prettyPrintStat } from './util'\nimport LineGraph from './Components/LineGraph'\nimport \"leaflet/dist/leaflet.css\"\n\nfunction App() {\n  const [countries, setCountries] = useState([])\n  const [country, setCountry] = useState('worldwide')\n  const [countryInfo, setCountryInfo] = useState({})\n  const [tableData, setTableData] = useState([])\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data)\n    })\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async() =>{\n      await fetch('https://disease.sh/v3/covid-19/countries')\n      .then(response => response.json())\n      .then(data => {\n        const countries = data.map(country => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }\n        ))\n        let sortedData = sortData(data)\n        setCountries(countries)\n        setTableData(sortedData)\n        setMapCountries(data);\n      })\n    }\n    getCountriesData();\n  }, [])\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url).then(response => response.json()).then(data => {\n      setCountryInfo(data)\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    })\n  }\n\n  return (\n    <div className=\"app\">\n      <div className='app__left'>\n        <div className='app__header'>\n          <h1>Covid-19 Tracker</h1>\n          <FormControl className='app__dropdown'>\n            <Select variant='outlined' onChange={onCountryChange} value={country}>\n              <MenuItem value='worldwide'>Worldwide</MenuItem>\n              {countries.map(country => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className='app__stats'>\n          <InfoBox\n            isRed\n            active={casesType === 'cases'}\n            onClick={e => setCasesType('cases')}\n            title='Coronavirus Cases'\n            total={prettyPrintStat(countryInfo.todayCases)}\n            cases={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            active={casesType === 'recovered'}\n            onClick={e => setCasesType('recovered')}\n            title='Recovered'\n            total={prettyPrintStat(countryInfo.todayRecovered)}\n            cases={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isRed\n            active={casesType === 'deaths'}\n            onClick={e => setCasesType('deaths')}\n            title='Deaths'\n            total={prettyPrintStat(countryInfo.todayDeaths)}\n            cases={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className='app__right'>\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table1 countries={tableData}/>\n          <h3>Worldwide new {casesType}</h3>\n          <LineGraph casesType={casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}